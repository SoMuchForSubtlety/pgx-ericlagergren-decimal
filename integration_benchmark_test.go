// Code generated by erb. DO NOT EDIT.

package decimal_test

import (
	"context"
	"testing"

	pgxdecimal "github.com/SoMuchForSubtlety/pgx-ericlagergren-decimal"
	"github.com/ericlagergren/decimal/sql/postgres"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

func BenchmarkQueryDecode_PG_numeric_to_Go_int64_1_rows_1_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]int64
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_int64_1_rows_10_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]int64
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_int64_10_rows_1_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]int64
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 10) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_int64_100_rows_10_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]int64
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 100) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_float64_1_rows_1_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]float64
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_float64_1_rows_10_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]float64
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_float64_10_rows_1_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]float64
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 10) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_float64_100_rows_10_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]float64
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 100) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_pgtype_Numeric_1_rows_1_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]pgtype.Numeric
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_pgtype_Numeric_1_rows_10_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]pgtype.Numeric
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_pgtype_Numeric_10_rows_1_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]pgtype.Numeric
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 10) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_pgtype_Numeric_100_rows_10_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]pgtype.Numeric
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 100) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_postgres_Decimal_1_rows_1_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]postgres.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_postgres_Decimal_1_rows_10_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]postgres.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_postgres_Decimal_10_rows_1_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]postgres.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 10) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_postgres_Decimal_100_rows_10_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]postgres.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 100) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_pgxdecimal_Decimal_1_rows_1_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]pgxdecimal.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_pgxdecimal_Decimal_1_rows_10_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]pgxdecimal.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_pgxdecimal_Decimal_10_rows_1_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]pgxdecimal.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 10) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_pgxdecimal_Decimal_100_rows_10_columns(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]pgxdecimal.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 100) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_postgres_Decimal_1_rows_1_columns_with_Register(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]postgres.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_postgres_Decimal_1_rows_10_columns_with_Register(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]postgres.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 1) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_postgres_Decimal_10_rows_1_columns_with_Register(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [1]postgres.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0 from generate_series(1, 10) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func BenchmarkQueryDecode_PG_numeric_to_Go_postgres_Decimal_100_rows_10_columns_with_Register(b *testing.B) {
	defaultConnTestRunner.RunTest(context.Background(), b, func(ctx context.Context, _ testing.TB, conn *pgx.Conn) {
		b.ResetTimer()
		var v [10]postgres.Decimal
		for i := 0; i < b.N; i++ {
			rows, _ := conn.Query(ctx, `select n::numeric + 0, n::numeric + 1, n::numeric + 2, n::numeric + 3, n::numeric + 4, n::numeric + 5, n::numeric + 6, n::numeric + 7, n::numeric + 8, n::numeric + 9 from generate_series(1, 100) n`)
			_, err := pgx.ForEachRow(
				rows,
				[]interface{}{&v[0], &v[1], &v[2], &v[3], &v[4], &v[5], &v[6], &v[7], &v[8], &v[9]},
				func() error { return nil },
			)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}
